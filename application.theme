<?php

/**
 *
 * @file
 * The primary PHP file for this theme.
 */
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 *
 * Register theme hook implementations.
 */
function application_theme(&$existing, $type, $theme, $path) {
  $items['user_register_form'] = array(
    'render element' => 'form',
    'path' => \Drupal::service('extension.path.resolver')->getPath('theme', 'application') . '/templates/user',
    'template' => 'user-register-form',
    'preprocess functions' => [
      'application_preprocess_user_register_form'
    ]
  );
  // ///////
  $items['user_login'] = array(
    'render element' => 'form',
    'path' => \Drupal::service('extension.path.resolver')->getPath('theme', 'application') . '/templates/user',
    'template' => 'user-login',
    'preprocess functions' => array(
      'application_preprocess_user_login'
    )
  );
  // ////////
  $items['user_pass'] = array(
    'render element' => 'form',
    'path' => \Drupal::service('extension.path.resolver')->getPath('theme', 'application') . '/templates/user',
    'template' => 'user-pass',
    'preprocess functions' => array(
      'application_preprocess_user_pass'
    )
  );

  return $items;
}

/**
 * implement hook_page_attachments_alter
 *
 * @param array $attachments
 */
function application_page_attachments_alter(array &$attachments) {
  $uid = \Drupal::currentUser()->id();
  if ($uid) {
    $attachments["#attached"]["library"][] = "application/application";
  }
  else {
    $attachments["#attached"]["library"][] = "application/user_login";
  }
}

/**
 * implement hook_preprocess_page
 */
function application_preprocess_page(&$variables) {
  $variables['logopath'] = theme_get_setting('logo.url');
  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
  $route = Url::fromRoute('entity.webform.canonical', [
    'webform' => 'ajouter_un_fichier'
  ]);
  $variables['custom_add_file'] = [
    '#type' => 'link',
    '#title' => [
      [
        '#type' => 'html_tag',
        '#tag' => 'i',
        "#attributes" => [
          'class' => [
            'fas',
            'fa-upload'
          ]
        ]
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'span',
        "#value" => 'Ajouter un fichier'
      ]
    ],
    '#url' => $route,
    '#options' => [
      'attributes' => [
        'class' => [
          'btn',
          'dtb-default'
        ]
      ]
    ]
  ];
}

function application_form_alter(&$form, &$form_state, $form_id) {
  $form['#prefix'] = '<div class="block">';
  $form['#suffix'] = '</div>';
}

function application_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  $form['name']['#prefix'] = '<div class="form-style-agile">';
  $form['name']['#suffix'] = '</div>';

  $form['pass']['#prefix'] = '<div class="form-style-agile">';
  $form['pass']['#suffix'] = '</div>';

  // dump($form['actions']);
  $form['actions']['#prefix'] = '<div class="form-actions form-wrapper form-group"> <div class="form-item">';
  $form['actions']['#suffix'] = '</div></div>';
  $form['actions']['submit']['#attributes'] = [
    'class' => [
      'btn',
      'btn-primary',
      'form-submit'
    ]
  ];
  $form['header_title'] = [
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => ' Connectez Vous ',
    '#weight' => -10,
    '#attributes' => [
      'class' => [
        'title-Big'
      ]
    ],
    [
      '#type' => 'html_tag',
      '#tag' => 'i',
      '#attributes' => [
        'class' => [
          'fas',
          'fa-level-down-alt'
        ]
      ]
    ]
  ];
  // dump($form['name']);
  // add place holser
  $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
  $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
  // add icon in name.
  $form['name']['#title'] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'i',
      '#attributes' => [
        'class' => [
          'fas fa-user'
        ]
      ]
    ],
    [
      '#markup' => $form['name']['#title']
    ]
  ];
  // add icon in pass.
  $form['pass']['#title'] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'i',
      '#attributes' => [
        'class' => [
          'fas fa-unlock-alt'
        ]
      ]
    ],
    [
      '#markup' => $form['pass']['#title']
    ]
  ];
  $form['custom_html'] = [
    '#markup' => '<div class="wthree-text">
				<ul>
					<li>
						<label class="anim">
							<input type="checkbox" class="checkbox" required="">
							<span>Stay Signed In</span>
						</label>
					</li>
					<li>
						<a href="/user/password"> Mot de passe oublier ?</a>
					</li>
				</ul>
			</div>',
    '#allowed_tags' => [
      'input',
      'ul',
      'li',
      'label',
      'div',
      'a'
    ]
  ];
  // $form['container_div'] = [
  // '#theme' => 'container',
  // '#children' => [
  // $form['header_title'],
  // $form['name'],
  // $form['pass'],
  // $form['custom_html'],
  // $form['actions']
  // ],
  // '#weight' => -10
  // ];
  $form['container_div'] = [
    "#type" => 'html_tag',
    '#tag' => 'div',
    'header_title' => $form['header_title'],
    'name' => $form['name'],
    'pass' => $form['pass'],
    'custom_html' => $form['custom_html'],
    'actions' => $form['actions']
  ];

  unset($form['header_title']);
  unset($form['name']);
  unset($form['pass']);
  unset($form['actions']);
  unset($form['custom_html']);
  // dump($form);
}

function application_preprocess_form_element($vars) {
  // dump($vars);
  // $vars['attributes'] = [
  // 'class' => [
  // 'form-style-agile'
  // ]
  // ];
}

/**
 */
function _display_menu($main_menu, $depth = 0) {
  $menu_tree = \Drupal::menuTree();
  $parameters = new MenuTreeParameters();

  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($main_menu);

  // Load the tree based on this set of parameters.
  $tree = $menu_tree->load($main_menu, $parameters);

  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array(
      'callable' => 'menu.default_tree_manipulators:checkAccess'
    ),
    // Use the default sorting of menu links.
    array(
      'callable' => 'menu.default_tree_manipulators:generateIndexAndSort'
    )
  );
  $tree = $menu_tree->transform($tree, $manipulators);

  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);
  $sub_menu_class = 'menupooledamin';
  $id = 'menu';
  if ($depth) {
    $sub_menu_class = 'sub-menu';
    $id = null;
  }

  $menu['#attributes']['class'] = $sub_menu_class;

  return [
    '#markup' => \Drupal::service('renderer')->render($menu)
  ];

  # echo '<pre>'; var_dump($depth); var_dump(count($main_menu) ); echo '</pre>';
  // $filename='debug-menu_'.time();
  // displayVarLogstheme($main_menu, $filename);
  static $linkClass = 1;
  $sub_menu = '';
  $lang = \Drupal::languageManager()->getDefaultLanguage();
  $sub_menu_class = 'menupooledamin';
  $id = 'menu';
  if ($depth) {
    $sub_menu_class = 'sub-menu';
    $id = null;
  }
  $html_menu = '<ul class="' . $sub_menu_class . '" id="' . $id . '" >';
  foreach ($main_menu as $key => $menu) {
    $link = $menu["link"];
    $icon = (!empty($link['options']['content']['fontawasonne'])) ? $link['options']['content']['fontawasonne'] : '';
    $id_taxo = explode("/term/", $link["link_path"]);
    if (!empty($id_taxo[1])) {
      $id_taxo = 'taxo' . $id_taxo[1];
    }
    else {
      $id_taxo = 'menu' . $link['mlid'];
    }
    if (!$link["hidden"]) {
      // if($link["language"]== $lang->language )
      {
        $class_li = "";
        if ($link["in_active_trail"]) {
          $class_li = "current_page_item current-menu-item active ";
          // echo '<pre>'; print_r($menu); echo '</pre>';
        }
        if ($linkClass == 1) {
          if (drupal_is_front_page()) {
            $class_li = "current_page_item current-menu-item active ";
          }
          // $class_li = $class_li.' hidden';
        }
        if ($link["has_children"]) {
          $class_li = $class_li . ' menu-item-has-children';
        }

        if (!empty($menu["below"])) {
          $sub_menu = _display_menu($menu["below"], $link["depth"]);
        }
        $link['html'] = TRUE; // pour retourner le html
                              // $link['title']='<strong>'.$link["title"].'</strong>';
        $options = array(
          'attributes' => array(),
          'html' => TRUE
        );
        $html_menu .= '<li class=" menu-item menu-item-type-taxonomy ' . $key . '  ' . $class_li . ' ' . $id_taxo . ' ">' . l($icon . ' <span>' . $link['title'] . '</span>', $link['href'], $options) . $sub_menu . '</li>';
        ++$linkClass;
      }
    }
  }
  $html_menu .= '</ul>';
  return $html_menu;
}

/**
 *
 * @param unknown $var
 * @param string $filename
 */
function displayVarLogstheme($var, $filename = 'debug') {
  $path_of_module = path_to_theme();
  if (!file_exists($path_of_module . '/logs')) {
    mkdir($path_of_module . '/logs');
  }
  $filename = $path_of_module . '/logs/' . $filename . '.inc';
  ob_start();
  print_r($var);
  $result = ob_get_clean();
  // if (!file_exists($filename) )
  {
    $monfichier = fopen($filename, 'w+');
    fputs($monfichier, $result);
    fclose($monfichier);
  }
  /* */
}

/**
 * Returns HTML for a wrapper for a menu sub-tree.
 *
 * @param array $variables
 *        An associative array containing:
 *        - tree: An HTML string containing the tree's items.
 *
 * @return string The constructed HTML.
 *
 * @see template_preprocess_menu_tree()
 * @see theme_menu_tree()
 *
 * @ingroup theme_functions
 */
function application_menu_tree(array &$variables) {
  return '<ul class=" menupooledamin">' . $variables['tree'] . '</ul>';
}

/**
 * Returns HTML for a menu link and submenu.
 *
 * @param array $variables
 *        An associative array containing:
 *        - element: Structured array data for a menu link.
 *
 * @return string The constructed HTML.
 *
 * @see theme_menu_link()
 *
 * @ingroup theme_functions
 */
function application_menu_link(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  $options = !empty($element['#localized_options']) ? $element['#localized_options'] : array();

  // Check plain title if "html" is not set, otherwise, filter for XSS attacks.
  $title = empty($options['html']) ? check_plain($element['#title']) : filter_xss_admin($element['#title']);

  // Ensure "html" is now enabled so l() doesn't double encode. This is now
  // safe to do since both check_plain() and filter_xss_admin() encode HTML
  // entities. See: https://www.drupal.org/node/2854978
  $options['html'] = TRUE;

  $href = $element['#href'];
  $attributes = !empty($element['#attributes']) ? $element['#attributes'] : array();

  if ($element['#below']) {
    // Prevent dropdown functions from being added to management menu so it
    // does not affect the navbar module.
    if (($element['#original_link']['menu_name'] == 'management') && (module_exists('navbar'))) {
      $sub_menu = drupal_render($element['#below']);
    }
    elseif ((!empty($element['#original_link']['depth'])) && ($element['#original_link']['depth'] == 1)) {
      // Add our own wrapper.
      unset($element['#below']['#theme_wrappers']);
      $sub_menu = '<ul class="sub-menu">' . drupal_render($element['#below']) . '</ul>';

      // Generate as standard dropdown.
      $title .= '<span class="fa fa-angle-right" style="float: right"></span>';
      $attributes['class'][] = 'dropdown';

      // Set dropdown trigger element to # to prevent inadvertant page loading
      // when a submenu link is clicked.
      // $options['attributes']['data-target'] = '#';
      // $options['attributes']['class'][] = 'dropdown-toggle';
      // $options['attributes']['data-toggle'] = 'dropdown';
    }
  }

  return '<li' . drupal_attributes($attributes) . '>' . l('<span>' . $title . '</span>', $href, $options) . $sub_menu . "</li>\n";
}

/**
 *
 * @param unknown $variables
 * @return string
 */
function application_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $options = [
    'html' => TRUE
  ];
  $iconClass = checkAvailableIcon($link['title']);

  $link = \Drupal\Core\Link::fromTextAndUrl($variables['element']['#link']['title'], $variables['element']['#link']['url'], $options);
  $renderableLink = $link->toRenderable();
  $renderableLink['#icon'] = [
    '#type' => 'html_tag',
    '#tag' => 'i',
    '#attributes' => [
      'class' => [
        $iconClass
      ]
    ]
  ];

  $listItem = [
    '#type' => 'html_tag',
    '#tag' => 'li',
    '#attributes' => [
      'class' => [
        !empty($variables['element']['#active']) ? 'active' : ''
      ]
    ],
    'link' => $renderableLink
  ];

  return \Drupal::service('renderer')->render($listItem);
}

/**
 * implement theme_menu_local_tasks
 *
 * @param array $variables
 * @return string
 */
function application_menu_local_tasks(array &$variables) {
  $output = '';

  if (!empty($variables['primary'])) {
    $variables['primary']['#prefix'] = '<h2 class="element-invisible">' . t('Primary tabs') . '</h2>';
    $variables['primary']['#prefix'] .= '<ul class="tabs--primary nav nav-tabs">';
    $variables['primary']['#suffix'] = '</ul>';
    $output .= \Drupal::service('renderer')->render($variables['primary']);
  }

  if (!empty($variables['secondary'])) {
    $variables['secondary']['#prefix'] = '<div class="config-menu-secondary">';
    $variables['secondary']['#prefix'] .= '<h2 class="element-invisible">' . t('Secondary tabs') . '</h2>';
    $variables['secondary']['#prefix'] .= '<ul class="tabs--secondary pagination pagination-sm">';
    $variables['secondary']['#suffix'] = '</ul>';
    $variables['secondary']['#suffix'] .= '</div>';
    $output .= \Drupal::service('renderer')->render($variables['secondary']);
  }
  return $output;
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
function application_preprocess_html(&$variables) {
  $userCurrent = \Drupal::currentUser();
  if ($userCurrent->isAuthenticated()) {
    $variables['theme_hook_suggestions'][] = 'html__userlogin';
  }
}

/**
 * Implementation of hook_preprocess_HOOK().
 */
/*
 * function application_preprocess_breadcrumb(array &$variables)
 * {
 * // Do not modify breadcrumbs if the Path Breadcrumbs module should be used.
 * if (function_exists("_bootstrap_use_path_breadcrumbs")) {
 * if (_bootstrap_use_path_breadcrumbs()) {
 * return;
 * }
 * }
 * $breadcrumb = &$variables['breadcrumb'];
 * // Optionally get rid of the homepage link.
 * if (function_exists("bootstrap_setting")) {
 * $show_breadcrumb_home = bootstrap_setting('breadcrumb_home');
 * } else {
 * $show_breadcrumb_home = false;
 * }
 * if (!$show_breadcrumb_home) {
 * array_shift($breadcrumb);
 * }
 * //echo '<pre> first : '; print_r($breadcrumb); echo '</pre>';
 * if (isset($breadcrumb) &&
 * !\Drupal::service('router.admin_context')->isAdminRoute(\Drupal::routeMatch()->getRouteObject()))
 * {
 * $item = menu_get_item();
 * #echo '<pre> menu : '; print_r($item); echo '</pre>';
 * $page_title = !empty($item['tab_parent']) ? check_plain($item['title']) :
 * drupal_get_title();
 * if (!empty($page_title)) {
 * $breadcrumb[] = array(
 * // If we are on a non-default tab, use the tab's title.
 * 'data' => $page_title,
 * 'class' => array('active'),
 * );
 * }
 * }
 * if (isset($breadcrumb) && arg(0) == 'admin' && arg(1) == 'structure' &&
 * arg(2) == 'taxonomy' && arg(4) == 'add') {
 * $item = menu_get_item();
 * //echo '<pre> menu : '; print_r($item['page_arguments'][2]->name); echo
 * '</pre>';
 * if (!empty($item['page_arguments'][2]->name)) {
 * $title = drupal_get_title();
 * $title .= ' ' . $item['page_arguments'][2]->name;
 * drupal_set_title($title);
 * }
 * }
 * $home = ['<a href="/">fas fa-home Accueil</a>'];
 * $breadcrumb = array_merge($home, $breadcrumb);
 * }
 */

/**
 * implement hook_breadcrumb
 *
 * @param unknown $variables
 */
/*
 * function application_breadcrumb($variables)
 * {
 * // Use the Path Breadcrumbs theme function if it should be used instead.
 * if (_bootstrap_use_path_breadcrumbs()) {
 * return path_breadcrumbs_breadcrumb($variables);
 * }
 * $output = '';
 * $breadcrumb = $variables['breadcrumb'];
 * #echo '<pre>'; print_r($breadcrumb); echo '</pre>';
 * // Determine if we are to display the breadcrumb.
 * $bootstrap_breadcrumb = bootstrap_setting('breadcrumb');
 * if (($bootstrap_breadcrumb == 1 || ($bootstrap_breadcrumb == 2 && arg(0) ==
 * 'admin')) && !empty($breadcrumb)) {
 * $build = array(
 * '#theme' => 'item_list__breadcrumb',
 * '#attributes' => array(
 * 'class' => array('breadcrumb'),
 * ),
 * '#items' => $breadcrumb,
 * '#type' => 'ol',
 * );
 * $output = drupal_render($build);
 * }
 * return $output;
 * }
 */

/**
 *
 * @param unknown $link_text
 */
function checkAvailableIcon($link_text) {
  $icon = '';
  if ('Voir' == $link_text) {
    $icon = 'fas fa-eye';
  }
  elseif ('Modifier' == $link_text) {
    $icon = 'far fa-edit';
  }
  elseif ('Structure' == $link_text) {
    $icon = 'fab fa-buromobelexperte';
  }
  elseif ('Suivi' == $link_text) {
    $icon = 'fas fa-stopwatch';
  }
  elseif ('Structure' == $link_text) {
    $icon = 'fab fa-buromobelexperte';
  }
  elseif ('Notifications' == $link_text) {
    $icon = 'fas fa-bell';
  }
  elseif ('Raccourcis' == $link_text) {
    $icon = 'fas fa-link';
  }
  elseif ('Contact' == $link_text) {
    $icon = 'fas fa-envelope-open';
  }
  elseif ('Utilisateurs' == $link_text) {
    $icon = 'fas fa-users';
  }
  elseif ('Contenu' == $link_text) {
    $icon = 'fas fa-clipboard-list';
  }
  elseif ('Site' == $link_text) {
    $icon = 'fas fa-globe';
  }
  return $icon;
}
